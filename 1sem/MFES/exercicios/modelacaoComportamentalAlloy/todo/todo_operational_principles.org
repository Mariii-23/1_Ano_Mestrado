#+title: Todo_operational_principles
http://alloy4fun.inesctec.pt/2eAoC9mGjBvCW5yPJ

#+begin_src bash
sig Task {}

var sig Pending in Task {}
var sig Done in Task {}

// Specify the following operational principles.

// Assume the existence of the following actions:
// pred add [t : Task] {...}
// pred complete [t : Task] {...}
// pred delete [t : Task] {...}
// pred stutter {...}

// Counter-examples may depict systems that are purposely badly implemented.


pred op1 {
	// A task cannot be pending and done at the same time
  always  no Pending & Done
  //or
  // always all t : Task | (t in Pending => t not in Done) and (t in Done => t not in Pending)
}


pred op2 {
	// Any done task was once pending
   always all d: Done | once d in Pending
}


pred op3 {
	// A task can only be pending after being added
    all x : Task | always (x in Pending implies before once add[x])
}


pred op4 {
	// Delete undos add
    all x : Task | always ((add[x];delete[x]) implies Pending'' = Pending and Done'' = Done)
}


pred op5 {
	// A task that is completed was pending since it was added
    all x : Task| always ( complete[x] implies ( x in Pending since add[x] ))
}


pred op6 {
	// After being completed, a task can only stop being considered done after being deleted
    all t:Task | always (complete[t] implies after (delete[t] releases t in Done))
}


pred op7 {
	// After being added, a task can only stop being pending after being completed or deleted
    all t:Task | always (add[t] implies after ((complete[t] or delete[t]) releases t in Pending))
}


pred op8 { //
	// If all tasks are done the only action that can occur is a delete
    always (Task = Done implies (always stutter or (stutter until (some x : Task | delete[x]))))
}
#+end_src
