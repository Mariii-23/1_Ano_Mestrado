#+title: Readme

* Exercise 1 - Data sharing with OpenMP

#+begin_comment
1.1. private(w)
1.2. firstprivate(w)
1.3. lastprivate(w)
1.4. reduction(+:w)
#+end_comment


a) How does the initial value of w vary with the use of the 1.0-1.4 directorives
   | directive       | w's value |
   | ---             |       110 |
   | private(w)      |        10 |
   | firstprivate(w) |        10 |
   | lastprivate(w)  |        50 |
   | reduction(+:w)  |       110 |
b) Does the final value of w inside the loop vary with the use of the 1.0-1.4 directives?

   Yes.

c) Is the final value of w after the loop execution what would be expected?

   No.

* Exercise 2 - Data races in OpenMP

a) Does the result of the dot product differ from run to run? If so, why?

    Sem o pragma
    #+begin_src bash
    Dot is 1.2020569031095949
    #+end_src

    Com o pragma
    #+begin_src bash
    Dot is 0.0000000001499965
    #+end_src

b) Is the result of the dot product affected by using different amounts of threads?
    Suggestion: run the code with 2, 4, and 8 threads.


    yes.
    | threads |             Result |
    |       2 | 0.0000000001499965 |
    |       4 | 1.2020569029595982 |
    |       8 | 1.2020569029595982 |

c) Adapt the parallelisation to produce the correct results using any of the OpenMP directives studied in the previous lab seesion(lab 5),

    Validate the correctness of the implementation by testing with different number of threads.

   #+begin_src c
   #include <omp.h>
   #include <stdio.h>
   #define size 100000
   double a[size], b[size];
   int main() {
     // init vectors
     for (int i = 0; i < size; i++) {
       a[i] = 1.0 / ((double)(size - i));
       b[i] = a[i] * a[i];
     }
     // compute dot product
     double dot = 0;
   #pragma omp parallel for reduction(+ : dot)
     for (int i = 0; i < size; i++) {
       dot += a[i] * b[i];
     }
     printf("Dot is %18.16f\n", dot);
   }
   #+end_src


d) It is possible to achieve a better correct parallelisation using different directive(s)?

   TODO :eyes: 👁

* Exercise 3

- without parallelisation ::  pi = 3.1415925980  | Time: 4.54 s


- with parallelisation ::

  | threads | time (seconds) |
  |       2 |           4.85 |
  |       4 |           2.48 |
  |       8 |           2.32 |
  |      10 |           2.49 |
  |      15 |           2.36 |
  |      20 |           2.35 |
